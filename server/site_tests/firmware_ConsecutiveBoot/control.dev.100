# Copyright 2019 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from autotest_lib.server import utils

AUTHOR = "ChromeOS Team"
NAME = "firmware_ConsecutiveBoot.dev.100"
METADATA = {
    "contacts": ["chromeos-faft@google.com", "jbettis@chromium.org"],
    "bug_component": "b:792402",  # ChromeOS > Platform > Enablement > Firmware > FAFT
    "criteria": "Servo based consecutive boot test (100 iterations)",
}
TIME = "LONG"
TEST_TYPE = "server"
DEPENDENCIES = "servo_state:WORKING"

DOC = """
This test is intended to be run with many iterations to ensure that the DUT
does boot into ChromeOS and then does power off later in developer mode.

Runs 100 boot iterations.
"""

args_dict = utils.args_to_dict(args)
servo_args = hosts.CrosHost.get_servo_arguments(args_dict)

args.append("faft_iterations=100")
args.append("faft_waitup_time=60")
args.append("faft_localrun=1")


def run_consecutive_boot(machine):
    host = hosts.create_host(machine, servo_args=servo_args)
    job.run_test(
        "firmware_ConsecutiveBoot",
        host=host,
        cmdline_args=args,
        disable_sysinfo=True,
        dev_mode=True,
        tag="dev.100",
    )


parallel_simple(run_consecutive_boot, machines)
