#!/usr/bin/env python3
# Copyright 2024 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import logging
import os
import sys
import re

from suite_lib import TestManager, TastManager

# Export suite to protobuf format

TEMPLATE_FILE = 'suite_template.v1'

SANITIZE = r'[ \-\s]+'
NAME_RE = re.compile(r'id *= *"([^"]+)",')
TEST_LIST_RE = re.compile(r'tests *= *\[([^\]]+)\]',
                          flags=re.MULTILINE | re.DOTALL)

def export_suite_to_starlark(suite_name, suite_tests, starlark_path):


    if os.path.isfile(starlark_path):
        # if suite already exists, update it
        _update_existing_suite_starlark(starlark_path, suite_name, suite_tests)
        logging.info(
                '\n\nupdated suite: %s, check diff to make sure no unexpected changes were made.',
                starlark_path)
        return

    # if suite does not exist, write it out
    # sanitize suite name by removing spaces and dashes and replacing with _
    # this allows using it as a function name in starlark
    suite_name_sanitized = re.sub(SANITIZE, '_', suite_name)
    # read in template
    template = ''
    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)),
                           TEMPLATE_FILE),
              'r',
              encoding='utf-8') as f:
        template = f.read()

    # write out suite using template
    contents = template.format(
            suite_name_sanitized=suite_name_sanitized,
            suite_name=suite_name,
            test_list_str=_to_string(suite_tests),
    )
    with open(starlark_path, 'w', encoding='utf-8') as f:
        f.write(contents)

    logging.info('\n\nwrote suite: %s.', starlark_path)


# parse existing suite starlark file to get metadata for regenerating updated
# suite, this assumes there is a single suite in the file and that the file was
# originally generated by this script, if multiple suites are detected an exception
# will be raised
#
# returns updated, owners, bug_component, criteria throws FileNotFoundError if file
# does not exist or Exception if there is a processing error
def _update_existing_suite_starlark(starlark_path, suite_name, suite_tests):
    with open(starlark_path, 'r') as f:
        data = f.read()
        suite_name_parsed = _parse_from_re(NAME_RE, data)
        if suite_name_parsed != suite_name:
            raise Exception(
                    'suite name mismatch: %s != %s refusing to overwrite %s' %
                    (suite_name, suite_name_parsed, starlark_path))

        if TEST_LIST_RE.findall(data) is None:
            raise Exception("failed to match test list for updating suite")
        # replace existing test list with new one
        new_test_list = 'tests = [\n{}\n        ]'.format(
                _to_string(suite_tests))
        data = TEST_LIST_RE.sub(new_test_list, data)

    with open(starlark_path, 'w') as f:
        f.write(data)


def _parse_from_re(regex, data):
    matches = regex.finditer(data)
    ret = None
    for match in matches:
        if ret is not None:
            raise Exception(
                    "multiple suites detected cannot update starlark file")
        ret = match.group(1)
    return ret


def _to_string(test_list):
    INDENT = 12
    sorted_test_list = sorted(test_list)
    ret = ''
    for test in sorted_test_list:
        ret += ' ' * INDENT + '"' + test + '",\n'
    # remove trailing newline
    return ret.rstrip('\n')


def main(args):
    root = logging.getLogger()
    root.setLevel(args.log)
    # change the format for the default root handler which is at index 0
    root_handler = root.handlers[0]
    root_handler.setFormatter(logging.Formatter('%(message)s'))

    if args.update_metadata:
        logging.info('updating tast metadata...')
        TastManager()
        if args.output is None and args.suite is None:
            sys.exit(0)
    if args.output is None or args.suite is None:
        logging.error('missing required arguments --suite and --output')
        sys.exit(1)

    tests = TestManager()
    basepath = os.path.dirname(os.path.abspath(__file__))
    cheetspath = os.path.abspath(
            os.path.join(basepath, '..', '..', '..', 'autotest-tests-cheets'))
    tests.initialize_from_fs([(basepath + '/../test_suites'),
                              (basepath + '/../server/site_tests'),
                              (basepath + '/../client/site_tests'),
                              (cheetspath + '/test_suites'),
                              (cheetspath + '/server/site_tests')])
    tests.process_all_tests()
    suite_tests = tests.list_suite_named(args.suite, use_type_prefix=True)

    export_suite_to_starlark(args.suite, suite_tests, args.output)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            "--log",
            help="Provide logging level",
            default='INFO',
            choices=[
                    'CRITICAL',
                    'ERROR',
                    'WARNING',
                    'INFO',
                    'DEBUG',
                    'NOTSET',
            ],
    )
    parser.add_argument(
            '--suite',
            help='suite to parse from autotest format',
    )
    parser.add_argument(
            '--output',
            help='path to file to write starlark centralized style suite to',
    )
    parser.add_argument(
            '--update-metadata',
            help='generate updated tast metadata for cros-test-finder',
            action='store_true',
            default=False,
    )
    parsed_args = parser.parse_args()
    main(parsed_args)
