# Copyright 2022 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Verify the correct behaviour of the device when searching for attributes of
# services.

# The tester sends Service Search Request and Service Attribute Request to
# the DUT to ensure that it is able to response with different attributes:
# ServiceRecordHandle, BrowseGroupList, ProtocolDescriptorList and
# AdditionalProtocolDescriptorLists.
# It also checks that responses with continuation state work properly,
# as well as requests with non-existing attributes and various invalid requests.

# This test covers the Bluetooth SIG test cases:
# TP/SERVER/SA/BV-03-C
# TP/SERVER/SA/BV-05-C
# TP/SERVER/SA/BV-08-C
# TP/SERVER/SA/BV-20-C
# TP/SERVER/SA/BV-21-C
# TP/SERVER/SA/BI-01-C

from autotest_lib.server import utils

AUTHOR = 'chromeos-bluetooth'
NAME = 'bluetooth_AdapterCLHealth.cl_sdp_service_attribute_request_test.floss'
METADATA = {
    'contacts': ['chromeos-bt-team@google.com'],
    # ChromeOS > Platform > Connectivity > Bluetooth
    'bug_component': 'b:167317',
    'criteria': 'Test SDP service attribute request',
    'hw_agnostic': False,
    'variant_category': '{"name": "BT_Chipset_Kernel"}',
    'requirements': ['bt-gen-0001-v01'],
}
ATTRIBUTES = 'suite:bluetooth_floss'
TEST_TYPE = 'Server'
DEPENDENCIES = 'bluetooth_state:NORMAL, working_bluetooth_btpeer:1'

args_dict = utils.args_to_dict(args)


def run(machine):
    host = hosts.create_host(machine)
    job.run_test('bluetooth_AdapterCLHealth', host=host,
                 num_iterations=1, args_dict=args_dict,
                 tag='.'.join(NAME.split('.')[1:]),
                 test_name=NAME.split('.')[1], floss=True)


parallel_simple(run, machines)
